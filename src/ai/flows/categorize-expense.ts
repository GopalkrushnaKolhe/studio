
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A expense categorization AI agent.
 *
 * - categorizeExpense - A function that handles the expense categorization process.
 * - CategorizeExpenseInput - The input type for the categorizeExpense function.
 * - CategorizeExpenseOutput - The return type for the categorizeExpense function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CategorizeExpenseInputSchema = z.object({
  receiptDataUri: z
    .string()
    .describe(
      "A photo of a receipt, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
  receiptText: z.string().describe('The extracted text from the receipt.'),
});
export type CategorizeExpenseInput = z.infer<typeof CategorizeExpenseInputSchema>;

const ExpenseItemSchema = z.object({
    item: z.string().describe('The name of the individual item.'),
    price: z.number().describe('The price of the item.'),
    quantity: z.number().describe('The quantity of the item. Default to 1 if not specified.'),
});

const CategorizeExpenseOutputSchema = z.object({
  category: z
    .enum(['grocery', 'dining', 'fashion', 'travel', 'other'])
    .describe('The category of the expense.'),
  confidence: z
    .number()
    .describe('The confidence level of the categorization (0-1).'),
  amount: z.number().describe('The total amount of the expense.'),
  currency: z.string().describe('The ISO 4217 currency code of the expense (e.g., USD, EUR).'),
  items: z.array(ExpenseItemSchema).describe('A list of all individual items, their prices, and quantities found on the receipt.'),
});
export type CategorizeExpenseOutput = z.infer<typeof CategorizeExpenseOutputSchema>;

export async function categorizeExpense(input: CategorizeExpenseInput): Promise<CategorizeExpenseOutput> {
  return categorizeExpenseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeExpensePrompt',
  input: {schema: CategorizeExpenseInputSchema},
  output: {schema: CategorizeExpenseOutputSchema},
  prompt: `You are an expert expense categorizer and data extractor with multi-lingual capabilities. Your primary task is to determine the total expense amount accurately.

You will be provided with the text and an image of a receipt. The receipt can be in any language. You MUST follow these steps:

1.  **Analyze Receipt Content**: First, examine the receipt to see if it contains a clear breakdown of individual items with quantities and prices.
2.  **Determine Calculation Method**:
    *   **IF** the receipt has detailed line items (item name, quantity, price): You MUST calculate the total yourself. Sum the result of (price * quantity) for every item, then add any taxes and subtract any discounts shown on the receipt. This calculated value is the **ONLY** value you should use for the 'amount' field.
    *   **ELSE IF** the receipt does NOT have a clear breakdown of line items: You MUST find and extract the final total amount printed on the receipt. Use this extracted value for the 'amount' field.
3.  **Identify Currency**: Identify the currency from its symbol (e.g., ₹, $, €) or code (e.g., INR, USD, EUR) and determine its three-letter ISO 4217 code.
4.  **Extract Items**: If available, extract each line item, its price, and quantity. If quantity is not mentioned, assume it is 1.
5.  **Categorize**: Categorize the expense into 'grocery', 'dining', 'fashion', 'travel', or 'other'.
    *   'grocery': raw food ingredients (e.g., 'peanuts', 'lentils', 'wheat', 'turmeric', 'tomato').
    *   'dining': restaurants, cafes.
    *   'travel': hotels, airline tickets.
6.  **Confidence**: Provide a confidence level (0-1) for your categorization.

Receipt Text: {{{receiptText}}}
Receipt Image: {{media url=receiptDataUri}}

Provide the output in the specified format. Your primary responsibility is to choose the correct method for determining the total amount based on the receipt's content.`,
});

const categorizeExpenseFlow = ai.defineFlow(
  {
    name: 'categorizeExpenseFlow',
    inputSchema: CategorizeExpenseInputSchema,
    outputSchema: CategorizeExpenseOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
