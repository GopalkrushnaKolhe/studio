
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A expense categorization AI agent.
 *
 * - categorizeExpense - A function that handles the expense categorization process.
 * - CategorizeExpenseInput - The input type for the categorizeExpense function.
 * - CategorizeExpenseOutput - The return type for the categorizeExpense function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CategorizeExpenseInputSchema = z.object({
  receiptDataUri: z
    .string()
    .describe(
      "A photo of a receipt, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
  receiptText: z.string().describe('The extracted text from the receipt.'),
});
export type CategorizeExpenseInput = z.infer<typeof CategorizeExpenseInputSchema>;

const ExpenseItemSchema = z.object({
    item: z.string().describe('The name of the individual item.'),
    price: z.number().describe('The price of the item.'),
    quantity: z.number().describe('The quantity of the item. Default to 1 if not specified.'),
});

const CategorizeExpenseOutputSchema = z.object({
  category: z
    .enum(['grocery', 'dining', 'fashion', 'travel', 'other'])
    .describe('The category of the expense.'),
  confidence: z
    .number()
    .describe('The confidence level of the categorization (0-1).'),
  amount: z.number().describe('The total amount of the expense.'),
  currency: z.string().describe('The ISO 4217 currency code of the expense (e.g., USD, EUR).'),
  items: z.array(ExpenseItemSchema).describe('A list of all individual items, their prices, and quantities found on the receipt.'),
});
export type CategorizeExpenseOutput = z.infer<typeof CategorizeExpenseOutputSchema>;

export async function categorizeExpense(input: CategorizeExpenseInput): Promise<CategorizeExpenseOutput> {
  return categorizeExpenseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeExpensePrompt',
  input: {schema: CategorizeExpenseInputSchema},
  output: {schema: CategorizeExpenseOutputSchema},
  prompt: `You are an expert expense categorizer and data extractor.

You will be provided with the text extracted from a receipt and an image of the receipt. You must perform the following tasks:
1.  Extract each individual line item from the receipt along with its price and quantity. If quantity is not explicitly mentioned for an item, assume it is 1. Populate the 'items' array with these details.
2.  Categorize the expense into one of the following categories: 'grocery', 'dining', 'fashion', 'travel', or 'other'.
3.  If the receipt contains items like 'peanuts', 'lentils', 'wheat', 'turmeric', 'tomato', 'potato', 'sugar', or other raw food ingredients, it should be categorized as 'grocery'.
4.  If the receipt is from a restaurant or a cafe, it should be categorized as 'dining'.
5.  If the receipt is from a hotel or for an airline ticket, it must be categorized as 'travel'.
6.  Provide a confidence level for your categorization, from 0 to 1.
7.  Extract the total amount from the receipt. This is usually the largest number at the end of the receipt.
8.  Identify the currency of the expense and provide its three-letter ISO 4217 code (e.g., USD, EUR, GBP).

Receipt Text: {{{receiptText}}}
Receipt Image: {{media url=receiptDataUri}}

Provide the output in the specified format.`,
});

const categorizeExpenseFlow = ai.defineFlow(
  {
    name: 'categorizeExpenseFlow',
    inputSchema: CategorizeExpenseInputSchema,
    outputSchema: CategorizeExpenseOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
